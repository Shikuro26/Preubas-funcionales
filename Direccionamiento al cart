
from selenium import webdriver 
from selenium.webdriver.common.by import By  
from selenium.webdriver.common.keys import Keys   
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver import ActionChains
import time
import os
from datetime import datetime 

# Función para crear carpeta numerada
def crear_carpeta_prueba():
    contador = 1
    while True:
        nombre_carpeta = f"prueba_coffee_cart_pestana_{contador}"
        if not os.path.exists(nombre_carpeta):
            os.makedirs(nombre_carpeta)
            return nombre_carpeta
        contador += 1

# Función para tomar captura de pantalla
def tomar_captura(driver, carpeta, nombre_archivo):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    ruta_archivo = os.path.join(carpeta, f"{nombre_archivo}_{timestamp}.png")
    driver.save_screenshot(ruta_archivo)
    print(f"Captura guardada: {ruta_archivo}")
    return ruta_archivo

# Función para agregar producto al carrito
def agregar_producto_carrito(driver, carpeta, producto_selector, nombre_producto):
    try:
        print(f"\n=== AGREGANDO {nombre_producto} AL CARRITO ===")
        
        # Captura ANTES de agregar producto
        tomar_captura(driver, carpeta, f"before_add_{nombre_producto.lower().replace(' ', '_')}")
        
        # Buscar y hacer clic en el producto
        wait = WebDriverWait(driver, 10)
        producto = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, producto_selector)))
        producto.click()
        time.sleep(2)
        
        # Captura DESPUÉS de agregar producto
        tomar_captura(driver, carpeta, f"after_add_{nombre_producto.lower().replace(' ', '_')}")
        
        print(f"✅ {nombre_producto} agregado al carrito")
        return True
        
    except Exception as e:
        print(f"ERROR agregando {nombre_producto}: {str(e)}")
        return False

# FUNCIÓN PRINCIPAL: Proceso completo de pago en pestaña Cart
def proceso_completo_pago_pestana_cart(driver, carpeta):
    try:
        print(f"\n{'='*70}")
        print(f"=== PROCESO COMPLETO DE PAGO EN PESTAÑA 'CART' ===")
        print(f"{'='*70}")
        
        # PASO 1: Ir a la pestaña "Cart" del menú superior
        print(f"\n--- PASO 1: NAVEGANDO A PESTAÑA 'CART' DEL MENÚ ---")
        wait = WebDriverWait(driver, 15)
        
        # Buscar la pestaña "Cart" en el menú superior
        posibles_selectores = [
            "a[href='/cart']",
            "nav a[href='/cart']",
            ".nav-link[href='/cart']",
            "header a[href='/cart']",
            ".navbar a[href='/cart']"
        ]
        
        cart_tab = None
        for selector in posibles_selectores:
            try:
                cart_tab = driver.find_element(By.CSS_SELECTOR, selector)
                break
            except:
                continue
        
        if not cart_tab:
            # Buscar por texto "Cart" en enlaces
            enlaces = driver.find_elements(By.TAG_NAME, "a")
            for enlace in enlaces:
                if "cart" in enlace.text.lower() and "/cart" in enlace.get_attribute("href"):
                    cart_tab = enlace
                    break
        
        if cart_tab:
            print(f"✅ Pestaña 'Cart' encontrada: {cart_tab.text}")
            cart_tab.click()
            time.sleep(3)
        else:
            return "ERROR: Pestaña Cart no encontrada"
        
        tomar_captura(driver, carpeta, "01_pestana_cart_abierta")
        
        # PASO 2: Verificar productos en el carrito
        print(f"\n--- PASO 2: VERIFICANDO PRODUCTOS EN EL CARRITO ---")
        try:
            productos_en_carrito = driver.find_elements(By.CSS_SELECTOR, "[data-test*='cart-item'], .cart-item, .product-item")
            print(f"Productos encontrados en carrito: {len(productos_en_carrito)}")
            
            # Obtener total inicial
            total_inicial = driver.find_element(By.CSS_SELECTOR, "[data-test='checkout-total'], .total, .cart-total").text
            print(f"Total inicial: {total_inicial}")
        except:
            total_inicial = "No disponible"
            print("⚠  No se pudo obtener información del carrito")
        
        tomar_captura(driver, carpeta, "02_carrito_inicial_verificado")
        
        # PASO 3: Gestionar cantidades (sumar y restar)
        print(f"\n--- PASO 3: GESTIONANDO CANTIDADES DE PRODUCTOS ---")
        
        # Sumar cantidad (+1)
        print("Incrementando cantidad de un producto...")
        increment_buttons = driver.find_elements(By.CSS_SELECTOR, "[data-test*='+'], .increment, .add-one")
        if increment_buttons:
            increment_buttons[0].click()
            time.sleep(3)
            tomar_captura(driver, carpeta, "03_producto_incrementado")
            
            # Verificar nuevo total
            try:
                nuevo_total = driver.find_element(By.CSS_SELECTOR, "[data-test='checkout-total'], .total, .cart-total").text
                print(f"Total después de incrementar: {nuevo_total}")
            except:
                print("No se pudo obtener el nuevo total")
        
        # Restar cantidad (-1)
        print("Decrementando cantidad de un producto...")
        decrement_buttons = driver.find_elements(By.CSS_SELECTOR, "[data-test*='-'], .decrement, .remove-one")
        if decrement_buttons:
            decrement_buttons[0].click()
            time.sleep(3)
            tomar_captura(driver, carpeta, "04_producto_decrementado")
            
            # Verificar total actualizado
            try:
                total_final_gestion = driver.find_element(By.CSS_SELECTOR, "[data-test='checkout-total'], .total, .cart-total").text
                print(f"Total después de decrementar: {total_final_gestion}")
            except:
                print("No se pudo obtener el total actualizado")
        
        # PASO 4: Iniciar proceso de checkout
        print(f"\n--- PASO 4: INICIANDO PROCESO DE CHECKOUT ---")
        tomar_captura(driver, carpeta, "05_antes_iniciar_checkout")
        
        # Buscar y hacer clic en botón de checkout/proceder al pago
        checkout_buttons = [
            "[data-test='checkout']",
            ".checkout-btn",
            ".proceed-checkout",
            "button:contains('Checkout')",
            "button:contains('Proceed')",
            "button:contains('Pay')"
        ]
        
        checkout_iniciado = False
        for selector in checkout_buttons:
            try:
                checkout_btn = driver.find_element(By.CSS_SELECTOR, selector)
                print(f"Botón de checkout encontrado: {checkout_btn.text}")
                checkout_btn.click()
                time.sleep(3)
                checkout_iniciado = True
                break
            except:
                continue
        
        if not checkout_iniciado:
            print("⚠  No se encontró botón específico de checkout, continuando con formulario...")
        
        tomar_captura(driver, carpeta, "06_checkout_iniciado")
        
        # PASO 5: Llenar formulario de datos personales
        print(f"\n--- PASO 5: LLENANDO FORMULARIO DE DATOS ---")
        
        try:
            # Llenar nombre
            name_field = wait.until(EC.presence_of_element_located((By.ID, "name")))
            name_field.clear()
            name_field.send_keys("Juan Pérez Prueba")
            print("✅ Nombre ingresado: Juan Pérez Prueba")
            
            # Llenar email
            email_field = driver.find_element(By.ID, "email")
            email_field.clear()
            email_field.send_keys("juan.perez@testcoffee.com")
            print("✅ Email ingresado: juan.perez@testcoffee.com")
            
            time.sleep(2)
            tomar_captura(driver, carpeta, "07_formulario_datos_completado")
            
        except Exception as e:
            print(f"❌ Error llenando formulario de datos: {str(e)}")
            return f"ERROR en formulario de datos: {str(e)}"
        
        # PASO 6: Verificar total final antes del pago
        print(f"\n--- PASO 6: VERIFICANDO TOTAL FINAL ---")
        try:
            total_final_checkout = driver.find_element(By.CSS_SELECTOR, "[data-test='checkout-total'], .total, .cart-total, .final-total").text
            print(f"Total final a pagar: {total_final_checkout}")
        except:
            total_final_checkout = "No disponible"
            print("⚠  No se pudo obtener el total final")
        
        tomar_captura(driver, carpeta, "08_total_final_verificado")
        
        # PASO 7: Procesar pago
        print(f"\n--- PASO 7: PROCESANDO PAGO ---")
        
        try:
            # Buscar botón de pago/submit
            payment_buttons = [
                "#submit-payment",
                ".submit-payment",
                ".pay-now",
                "button[type='submit']",
                ".payment-submit"
            ]
            
            payment_processed = False
            for selector in payment_buttons:
                try:
                    pay_button = driver.find_element(By.CSS_SELECTOR, selector)
                    print(f"Botón de pago encontrado: {pay_button.text}")
                    pay_button.click()
                    time.sleep(5)  # Tiempo extra para procesar pago
                    payment_processed = True
                    break
                except:
                    continue
            
            if not payment_processed:
                return "ERROR: No se encontró botón de pago"
            
            tomar_captura(driver, carpeta, "09_pago_procesado")
            
        except Exception as e:
            print(f"❌ Error procesando pago: {str(e)}")
            return f"ERROR procesando pago: {str(e)}"
        
        # PASO 8: Verificar confirmación de pago
        print(f"\n--- PASO 8: VERIFICANDO CONFIRMACIÓN DE PAGO ---")
        
        try:
            # Buscar mensaje de confirmación
            confirmacion_selectores = [
                ".snackbar",
                ".success-message",
                ".payment-success",
                ".order-confirmation",
                ".thank-you-message"
            ]
            
            mensaje_confirmacion = None
            for selector in confirmacion_selectores:
                try:
                    mensaje_element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
                    mensaje_confirmacion = mensaje_element.text
                    break
                except:
                    continue
            
            if mensaje_confirmacion:
                print(f"✅ Confirmación de pago recibida: {mensaje_confirmacion}")
                resultado_pago = f"PAGO EXITOSO: {mensaje_confirmacion}"
            else:
                print("⚠  No se encontró mensaje de confirmación específico")
                resultado_pago = "PAGO PROCESADO: Sin mensaje de confirmación visible"
            
            tomar_captura(driver, carpeta, "10_confirmacion_pago")
            
        except Exception as e:
            print(f"⚠  Error verificando confirmación: {str(e)}")
            resultado_pago = f"PAGO PROCESADO: Error en confirmación - {str(e)}"
        
        # PASO 9: Verificar estado final del carrito
        print(f"\n--- PASO 9: VERIFICANDO ESTADO FINAL ---")
        
        try:
            # Verificar si el carrito se vació o cambió
            time.sleep(3)
            tomar_captura(driver, carpeta, "11_estado_final_carrito")
            
            # Intentar volver a la página principal para ver el contador del carrito
            driver.get("https://coffee-cart.app/")
            time.sleep(3)
            tomar_captura(driver, carpeta, "12_pagina_principal_final")
            
        except Exception as e:
            print(f"⚠  Error verificando estado final: {str(e)}")
        
        # RESUMEN COMPLETO
        print(f"\n{'='*60}")
        print(f"=== RESUMEN COMPLETO DEL PROCESO DE PAGO ===")
        print(f"{'='*60}")
        print(f"✅ 1. Navegación a pestaña Cart: EXITOSA")
        print(f"✅ 2. Verificación de productos: EXITOSA")
        print(f"✅ 3. Gestión de cantidades: EXITOSA")
        print(f"✅ 4. Inicio de checkout: EXITOSO")
        print(f"✅ 5. Formulario de datos: COMPLETADO")
        print(f"✅ 6. Verificación de total: {total_final_checkout}")
        print(f"✅ 7. Procesamiento de pago: EXITOSO")
        print(f"✅ 8. Confirmación: {resultado_pago}")
        print(f"✅ 9. Verificación final: COMPLETADA")
        
        return f"PROCESO COMPLETO EXITOSO - {resultado_pago}"
        
    except Exception as e:
        print(f"❌ ERROR GENERAL en proceso de pago: {str(e)}")
        tomar_captura(driver, carpeta, "error_proceso_pago")
        return f"ERROR GENERAL: {str(e)}"

# ==================== SCRIPT PRINCIPAL ====================

# Crear carpeta para esta prueba
carpeta_prueba = crear_carpeta_prueba()
print(f"Carpeta de prueba creada: {carpeta_prueba}")

# Inicializar el navegador
driver = webdriver.Chrome()
driver.maximize_window()
driver.get("https://coffee-cart.app/")
time.sleep(3)

print("=== INICIANDO PROCESO COMPLETO DE PAGO EN PESTAÑA CART ===")

# Tomar captura inicial
tomar_captura(driver, carpeta_prueba, "00_pagina_inicial")

# Realizar todas las operaciones
resultados = {}

# FASE 1: AGREGAR 3 PRODUCTOS
print(f"\n🔄 FASE 1: AGREGANDO 3 PRODUCTOS AL CARRITO")

productos = [
    ("[data-test='Espresso']", "Espresso"),
    ("[data-test='Cappuccino']", "Cappuccino"),
    ("[data-test='Mocha']", "Mocha")
]

for i, (selector, nombre) in enumerate(productos, 1):
    print(f"\n--- Agregando producto {i}: {nombre} ---")
    resultados[f'producto_{i}'] = agregar_producto_carrito(driver, carpeta_prueba, selector, nombre)
    time.sleep(2)

# FASE 2: PROCESO COMPLETO DE PAGO EN PESTAÑA CART
print(f"\n🔄 FASE 2: EJECUTANDO PROCESO COMPLETO DE PAGO")
resultados['proceso_pago_completo'] = proceso_completo_pago_pestana_cart(driver, carpeta_prueba)

# MOSTRAR RESUMEN FINAL COMPLETO
print(f"\n{'='*70}")
print(f"=== RESUMEN FINAL DE TODO EL PROCESO ===")
print(f"{'='*70}")

print(f"\n📋 PRODUCTOS AGREGADOS:")
for i in range(1, 4):
    key = f'producto_{i}'
    if key in resultados:
        status = "✅" if resultados[key] else "❌"
        producto_nombre = productos[i-1][1]
        print(f"  {status} {producto_nombre}: {'Agregado exitosamente' if resultados[key] else 'Error al agregar'}")

print(f"\n📋 PROCESO DE PAGO COMPLETO:")
pago_resultado = resultados.get('proceso_pago_completo', 'No ejecutado')
status = "✅" if "EXITOSO" in str(pago_resultado) else "❌"
print(f"  {status} Resultado: {pago_resultado}")

print(f"\n📁 Todas las capturas (12+ imágenes) se guardaron en: {carpeta_prueba}")
print(f"📊 Total de operaciones realizadas: {len(resultados)}")

# Captura final del navegador
tomar_captura(driver, carpeta_prueba, "99_estado_final_navegador")

time.sleep(3)
driver.quit()

print(f"\n🎉 PROCESO COMPLETO DE PAGO EN PESTAÑA CART FINALIZADO 🎉")
print(f"🔍 Revisa las {12}+ capturas para ver todo el flujo paso a paso")
